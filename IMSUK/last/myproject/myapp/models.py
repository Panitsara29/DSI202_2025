#models.py 
from django.db import models
from django.contrib.auth.models import User
from django.utils import timezone
from decimal import Decimal

# ‚úÖ ‡∏Ç‡∏¢‡∏≤‡∏¢‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
class Profile(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    full_name = models.CharField(max_length=200, blank=True)
    phone = models.CharField(max_length=20, blank=True)

    def __str__(self):
        return f"‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á {self.user.username}"

# ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
class DeliveryAddress(models.Model):
    ICON_CHOICES = [
        ('home', '‡∏ö‡πâ‡∏≤‡∏ô'),
        ('office', '‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô'),
        ('other', '‡∏≠‡∏∑‡πà‡∏ô‡πÜ'),
    ]

    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='addresses')

    # üÜï ‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÉ‡∏´‡∏°‡πà
    label = models.CharField(max_length=50, blank=True, verbose_name="‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà")
    icon = models.CharField(max_length=20, choices=ICON_CHOICES, default='home', verbose_name="‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô")
    
    street = models.CharField(max_length=255, verbose_name="‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà/‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà", default='')
    subdistrict = models.CharField(max_length=100, verbose_name="‡πÅ‡∏Ç‡∏ß‡∏á/‡∏ï‡∏≥‡∏ö‡∏•", default='')
    district = models.CharField(max_length=100, verbose_name="‡πÄ‡∏Ç‡∏ï/‡∏≠‡∏≥‡πÄ‡∏†‡∏≠", default='')
    province = models.CharField(max_length=100, verbose_name="‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î", default='')
    postal_code = models.CharField(max_length=10, verbose_name="‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå", default='')
    note = models.TextField(blank=True, verbose_name="‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏", default='')

    is_default = models.BooleanField(default=False, verbose_name="‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏•‡∏±‡∏Å")
    created_at = models.DateTimeField(default=timezone.now)

    def __str__(self):
        return f"{self.label or '‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà'} | {self.street}, {self.subdistrict}, {self.district}, {self.province} {self.postal_code}"


# ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÄ‡∏°‡∏ô‡∏π 
class Category(models.Model):
    name = models.CharField(max_length=100)

    def __str__(self):
        return self.name

# ‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤ 
class Restaurant(models.Model):
    name = models.CharField(max_length=200, unique=True)

    def __str__(self):
        return self.name

# ‡∏™‡πà‡∏ß‡∏ô‡∏ú‡∏™‡∏°‡∏ó‡∏µ‡πà‡πÅ‡∏û‡πâ 
class Allergen(models.Model):
    name = models.CharField(max_length=100)

    def __str__(self):
        return self.name

class Coupon(models.Model):
    code = models.CharField(max_length=20, unique=True)
    discount_percent = models.PositiveIntegerField(help_text="‡πÄ‡∏ä‡πà‡∏ô 10 = ‡∏•‡∏î 10%")
    start_date = models.DateTimeField()
    end_date = models.DateTimeField()

    def is_active(self):
        now = timezone.now()
        return self.start_date <= now <= self.end_date

    def __str__(self):
        return f"{self.code} ({self.discount_percent}% off)"

# ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£
class MenuItem(models.Model):
    name = models.CharField(max_length=200, unique=True)
    description = models.TextField()
    price = models.DecimalField(max_digits=6, decimal_places=2, default=50.00)
    is_available = models.BooleanField(default=True)
    category = models.ForeignKey(Category, on_delete=models.SET_NULL, null=True)
    restaurant = models.ForeignKey(Restaurant, on_delete=models.SET_NULL, null=True)
    allergens = models.ManyToManyField(Allergen, blank=True)
    image = models.ImageField(upload_to='menu/', blank=True, null=True)
    favorited_by = models.ManyToManyField(User, related_name='favorite_items', blank=True)
    coupon = models.ForeignKey(Coupon, on_delete=models.SET_NULL, null=True, blank=True)

    def __str__(self):
        return self.name
    
    def get_discounted_price(self):
        if self.coupon and self.coupon.is_active():
            discount = Decimal(self.coupon.discount_percent) / Decimal(100)
            return self.price * (Decimal(1) - discount)
        return self.price

    def get_discount_percent(self):
        if self.coupon and self.coupon.is_active():
            return self.coupon.discount_percent
        return 0

# ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏£‡∏ñ‡πÄ‡∏Ç‡πá‡∏ô
class CartItem(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE, null=True, blank=True)
    menu_item = models.ForeignKey(MenuItem, on_delete=models.CASCADE)
    quantity = models.PositiveIntegerField(default=1)

    def __str__(self):
        return f"{self.menu_item.name} x {self.quantity}"


# ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
# ‚úÖ ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
class Order(models.Model):
    STATUS_CHOICES = [
        ('pending', '‡∏£‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô'),
        ('paid', '‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß'),
        ('preparing', '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏≠‡∏≤‡∏´‡∏≤‡∏£'),
        ('delivering', '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏±‡∏î‡∏™‡πà‡∏á'),
        ('completed', '‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'),
        ('cancelled', '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'),
    ]

    PAYMENT_METHODS = [
        ('qr', 'PromptPay QR'),
        ('cod', '‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á'),
        ('card', '‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï'),
    ]

    user = models.ForeignKey(User, on_delete=models.CASCADE)
    delivery_address = models.ForeignKey(DeliveryAddress, on_delete=models.SET_NULL, null=True, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='pending')  # ‚úÖ ‡πÉ‡∏ä‡πâ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
    payment_method = models.CharField(max_length=10, choices=PAYMENT_METHODS, default='cod')
    payment_info = models.TextField(blank=True, null=True)
    payment_slip = models.ImageField(upload_to='slips/', blank=True, null=True)
    qr_image = models.ImageField(upload_to='qr_codes/', blank=True, null=True)

    total_price = models.DecimalField(max_digits=8, decimal_places=2, default=0.00)

    def __str__(self):
        return f"Order #{self.pk} by {self.user.username}"



# ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÉ‡∏ô‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
class OrderItem(models.Model):
    order = models.ForeignKey(Order, on_delete=models.CASCADE, related_name='items')
    menu_item = models.ForeignKey(MenuItem, on_delete=models.CASCADE)
    quantity = models.PositiveIntegerField()
    price = models.DecimalField(max_digits=6, decimal_places=2)

    def __str__(self):
        return f"{self.menu_item.name} x {self.quantity} (Order #{self.order.id})"
